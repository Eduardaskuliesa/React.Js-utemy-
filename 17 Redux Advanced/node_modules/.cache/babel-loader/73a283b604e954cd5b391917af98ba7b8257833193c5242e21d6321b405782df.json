{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  items: [],\n  quantity: 0,\n  toggleCart: false,\n  notification: null\n};\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: initialState,\n  reducers: {\n    replaceCart(state, action) {\n      state.quantity = action.payload.quantity;\n      state.items = action.payload.items;\n    },\n    addItem(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.quantity++;\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        existingItem.quantity = existingItem.quantity + 1;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n    removeItem(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.quantity--;\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    },\n    toggleCart(state) {\n      state.toggleCart = !state.toggleCart;\n    },\n    showNotification(state, action) {\n      state.notification = {\n        status: action.payload.status,\n        title: action.payload.title,\n        message: action.payload.message\n      };\n    }\n  }\n});\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"names":["createSlice","initialState","items","quantity","toggleCart","notification","cartSlice","name","reducers","replaceCart","state","action","payload","addItem","newItem","existingItem","find","item","id","push","price","totalPrice","title","removeItem","filter","showNotification","status","message","cartActions","actions"],"sources":["C:/Users/Eduardas/Desktop/React.Js(utemy)/17 Redux Advanced/src/components/store/cart-slice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n  items: [],\r\n  quantity: 0,\r\n  toggleCart: false,\r\n  notification: null,\r\n};\r\n\r\nconst cartSlice = createSlice({\r\n  name: \"cart\",\r\n  initialState: initialState,\r\n  reducers: {\r\n    replaceCart(state, action) {\r\n      state.quantity = action.payload.quantity;\r\n      state.items = action.payload.items;\r\n    },\r\n    addItem(state, action) {\r\n      const newItem = action.payload;\r\n      const existingItem = state.items.find((item) => item.id === newItem.id);\r\n      state.quantity++;\r\n      if (!existingItem) {\r\n        state.items.push({\r\n          id: newItem.id,\r\n          price: newItem.price,\r\n          quantity: 1,\r\n          totalPrice: newItem.price,\r\n          name: newItem.title,\r\n        });\r\n      } else {\r\n        existingItem.quantity = existingItem.quantity + 1;\r\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\r\n      }\r\n    },\r\n    removeItem(state, action) {\r\n      const id = action.payload;\r\n      const existingItem = state.items.find((item) => item.id === id);\r\n      state.quantity--;\r\n      if (existingItem.quantity === 1) {\r\n        state.items = state.items.filter((item) => item.id !== id);\r\n      } else {\r\n        existingItem.quantity--;\r\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\r\n      }\r\n    },\r\n    toggleCart(state) {\r\n      state.toggleCart = !state.toggleCart;\r\n    },\r\n    showNotification(state, action) {\r\n      state.notification = {\r\n        status: action.payload.status,\r\n        title: action.payload.title,\r\n        message: action.payload.message,\r\n      };\r\n    },\r\n  },\r\n});\r\n\r\nexport const cartActions = cartSlice.actions;\r\n\r\nexport default cartSlice;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,EAAE;EACTC,QAAQ,EAAE,CAAC;EACXC,UAAU,EAAE,KAAK;EACjBC,YAAY,EAAE;AAChB,CAAC;AAED,MAAMC,SAAS,GAAGN,WAAW,CAAC;EAC5BO,IAAI,EAAE,MAAM;EACZN,YAAY,EAAEA,YAAY;EAC1BO,QAAQ,EAAE;IACRC,WAAWA,CAACC,KAAK,EAAEC,MAAM,EAAE;MACzBD,KAAK,CAACP,QAAQ,GAAGQ,MAAM,CAACC,OAAO,CAACT,QAAQ;MACxCO,KAAK,CAACR,KAAK,GAAGS,MAAM,CAACC,OAAO,CAACV,KAAK;IACpC,CAAC;IACDW,OAAOA,CAACH,KAAK,EAAEC,MAAM,EAAE;MACrB,MAAMG,OAAO,GAAGH,MAAM,CAACC,OAAO;MAC9B,MAAMG,YAAY,GAAGL,KAAK,CAACR,KAAK,CAACc,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKJ,OAAO,CAACI,EAAE,CAAC;MACvER,KAAK,CAACP,QAAQ,EAAE;MAChB,IAAI,CAACY,YAAY,EAAE;QACjBL,KAAK,CAACR,KAAK,CAACiB,IAAI,CAAC;UACfD,EAAE,EAAEJ,OAAO,CAACI,EAAE;UACdE,KAAK,EAAEN,OAAO,CAACM,KAAK;UACpBjB,QAAQ,EAAE,CAAC;UACXkB,UAAU,EAAEP,OAAO,CAACM,KAAK;UACzBb,IAAI,EAAEO,OAAO,CAACQ;QAChB,CAAC,CAAC;MACJ,CAAC,MAAM;QACLP,YAAY,CAACZ,QAAQ,GAAGY,YAAY,CAACZ,QAAQ,GAAG,CAAC;QACjDY,YAAY,CAACM,UAAU,GAAGN,YAAY,CAACM,UAAU,GAAGP,OAAO,CAACM,KAAK;MACnE;IACF,CAAC;IACDG,UAAUA,CAACb,KAAK,EAAEC,MAAM,EAAE;MACxB,MAAMO,EAAE,GAAGP,MAAM,CAACC,OAAO;MACzB,MAAMG,YAAY,GAAGL,KAAK,CAACR,KAAK,CAACc,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKA,EAAE,CAAC;MAC/DR,KAAK,CAACP,QAAQ,EAAE;MAChB,IAAIY,YAAY,CAACZ,QAAQ,KAAK,CAAC,EAAE;QAC/BO,KAAK,CAACR,KAAK,GAAGQ,KAAK,CAACR,KAAK,CAACsB,MAAM,CAAEP,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKA,EAAE,CAAC;MAC5D,CAAC,MAAM;QACLH,YAAY,CAACZ,QAAQ,EAAE;QACvBY,YAAY,CAACM,UAAU,GAAGN,YAAY,CAACM,UAAU,GAAGN,YAAY,CAACK,KAAK;MACxE;IACF,CAAC;IACDhB,UAAUA,CAACM,KAAK,EAAE;MAChBA,KAAK,CAACN,UAAU,GAAG,CAACM,KAAK,CAACN,UAAU;IACtC,CAAC;IACDqB,gBAAgBA,CAACf,KAAK,EAAEC,MAAM,EAAE;MAC9BD,KAAK,CAACL,YAAY,GAAG;QACnBqB,MAAM,EAAEf,MAAM,CAACC,OAAO,CAACc,MAAM;QAC7BJ,KAAK,EAAEX,MAAM,CAACC,OAAO,CAACU,KAAK;QAC3BK,OAAO,EAAEhB,MAAM,CAACC,OAAO,CAACe;MAC1B,CAAC;IACH;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAMC,WAAW,GAAGtB,SAAS,CAACuB,OAAO;AAE5C,eAAevB,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}